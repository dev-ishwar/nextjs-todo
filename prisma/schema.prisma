// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Task {
    id          String  @id @default(cuid())
    title       String
    description String?
    dueDate     String?
    status      Status  @default(PENDING)
    user        User?   @relation(fields: [userId], references: [id])
    userId      String

    @@map(name: "tasks")
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId], name: "provider_providerAccountId")
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime? @default(now()) @map(name: "updated_at")
    tasks         Task[]
    accounts      Account[]
    sessions      Session[]
    password      String?

    @@map(name: "users")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Status {
    COMPLETED
    PENDING
}
